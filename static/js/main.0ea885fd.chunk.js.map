{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","image","Recipe","_ref","title","calories","ingredients","react_default","a","createElement","className","style","src","alt","Math","floor","map","ingredient","text","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","hits","console","log","stop","apply","this","arguments","onSubmit","e","preventDefault","type","value","onChange","target","src_Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,MAAA,oOCiBHC,EAfA,SAAAC,GAA2C,IAAzCC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUJ,EAAwBE,EAAxBF,MAAOK,EAAiBH,EAAjBG,YACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,QAClBO,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMV,MAAOW,IAAKX,EAAOY,IAAI,KAC7CN,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,uBAAeK,KAAKC,MAAMV,GAA1B,QACAE,EAAAC,EAAAC,cAAA,UACKH,EAAYU,IAAI,SAAAC,GAAU,OACvBV,EAAAC,EAAAC,cAAA,UAAKQ,EAAWC,WC2CrBC,SAlDH,WAEX,IAFiBC,EAIaC,mBAAS,IAJtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIVK,EAJUH,EAAA,GAIDI,EAJCJ,EAAA,GAAAK,EAKWN,mBAAS,IALpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKVE,EALUD,EAAA,GAKFE,EALEF,EAAA,GAAAG,EAMSV,mBAAS,IANlBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAMVE,EANUD,EAAA,GAMHE,EANGF,EAAA,GAQjBG,oBAAW,WACVC,KACE,CAACH,IAEJ,IAAMG,EAAU,eAAAjC,EAAAoB,OAAAc,EAAA,EAAAd,CAAAe,EAAA9B,EAAA+B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAA9B,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKC,MAAK,mCAAAC,OAAoCf,EAApC,YAAAe,OAXd,WAWc,aAAAA,OAVb,qCASG,cACZP,EADYG,EAAAK,KAAAL,EAAAE,KAAA,EAECL,EAASS,OAFV,OAEZR,EAFYE,EAAAK,KAGlBvB,EAAWgB,EAAKS,MAChBC,QAAQC,IAAIX,EAAKS,MAJC,wBAAAP,EAAAU,SAAAd,MAAH,yBAAArC,EAAAoD,MAAAC,KAAAC,YAAA,GAiBhB,OACClD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,QAAMiD,SARU,SAAAC,GACjBA,EAAEC,iBACF1B,EAASL,GACTC,EAAU,KAKkBpB,UAAU,eACpCH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAamD,KAAK,OAAOC,MAAOjC,EAAQkC,SAbvC,SAAAJ,GACpB7B,EAAU6B,EAAEK,OAAOF,UAajBvD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBmD,KAAK,UAAvC,WAEDtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbe,EAAQT,IAAI,SAAAhB,GAAM,OAClBO,EAAAC,EAAAC,cAACwD,EAAD,CACCC,IAAKlE,EAAOA,OAAOmE,MACnB/D,MAAOJ,EAAOA,OAAOmE,MACrB9D,SAAUL,EAAOA,OAAOK,SACxBJ,MAAOD,EAAOA,OAAOC,MACrBK,YAAaN,EAAOA,OAAOM,oBClCb8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ea885fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1jgEA\",\"image\":\"recipe_image__2R3Fe\"};","import React from 'react';\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            <h1>{title}</h1>\r\n            <p>Calories : {Math.floor(calories)} cal</p>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nconst App = () => {\n\n\tconst APP_ID = \"e6324b4d\";\n\tconst APP_KEY = \"934fdee47d9e7b5a9e85fdc75e51c142\";\n\tconst [recipes, setRecipes] = useState([]);\n\tconst [search, setSearch] = useState(\"\");\n\tconst [query, setQuery] = useState('');\n\n\tuseEffect( () => {\n\t\tgetRecipes();\n\t}, [query]);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t\tconsole.log(data.hits);\n\t};\n\n\tconst updateSearch = e => {\n\t\tsetSearch(e.target.value);\n\t}\n\n\tconst getSearch = e => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch(\"\");\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n\t\t\t\t<button className=\"search-button\" type=\"submit\">Search</button>\n\t\t\t</form>\n\t\t\t<div className=\"recipes\">\n\t\t\t\t{recipes.map(recipe => (\n\t\t\t\t\t<Recipe\n\t\t\t\t\t\tkey={recipe.recipe.label} \n\t\t\t\t\t\ttitle={recipe.recipe.label} \n\t\t\t\t\t\tcalories={recipe.recipe.calories}\n\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\tingredients={recipe.recipe.ingredients}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}